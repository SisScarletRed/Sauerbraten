fsvs = [
    void main(void)
    {
        gl_Position = gl_Vertex;   // woohoo, no mvp :) 
        gl_TexCoord[0].xy = gl_MultiTexCoord0.xy;
]

fsps = [
    #extension GL_ARB_texture_rectangle : enable
    uniform sampler2DRect tex0; 
    void main(void)
    {
        vec4 sample = texture2DRect(tex0, gl_TexCoord[0].xy);
]

////////////////////////////////////////////////
//
// color grading shader definitions:
//
////////////////////////////////////////////////

lazyshader 4 "colorgrade_shadows" [ @fsvs } ] [
	uniform vec4 params;
	@fsps
	
	float factor = max(sample.x, max(sample.y, sample.z));
	vec4 shadows = params;
	
	if(factor < 0.1)	//Shadows
	{
		if(factor > 0.01)
		{
			factor = (factor + 0.09)*10;
			
			shadows.w = shadows.x; //.w is value backup
			shadows.x = ((1 - shadows.w) / 2) * factor;
			shadows.x += shadows.w;	//Adding backup
			
			shadows.w = shadows.y; //.w is value backup
			shadows.y = ((1 - shadows.w) / 2) * factor;
			shadows.y += shadows.w;	//Adding backup
			
			shadows.w = shadows.z; //.w is value backup
			shadows.z = ((1 - shadows.w) / 2) * factor;
			shadows.z += shadows.w;	//Adding backup
		}
		gl_FragColor = vec4(sample.x * shadows.x, sample.y * shadows.y, sample.z * shadows.z, sample.w);	
	}
	else gl_FragColor = vec4(sample);
} ]

lazyshader 4 "colorgrade_midtones" [ @fsvs } ] [
	uniform vec4 params;
	@fsps
	
	float factor = (sample.x + sample.y + sample.z)/3;
	vec4 midtones = params;
	
	if(factor >= 0.1 && factor <= 0.5)	//Middle-tones
	{
		if(factor > 0.3)
		{
			factor = (factor - 0.31)*10;
			
			midtones.w = midtones.x; //.w is value backup
			midtones.x = ((1 - midtones.w) / 2) * factor;
			midtones.x += midtones.w;	//Adding backup
			
			midtones.w = midtones.y; //.w is value backup
			midtones.y = ((1 - midtones.w) / 2) * factor;
			midtones.y += midtones.w;	//Adding backup
			
			midtones.w = midtones.z; //.w is value backup
			midtones.z = ((1 - midtones.w) / 2) * factor;
			midtones.z += midtones.w;	//Adding backup
		}
		else if(factor <= 0.3)
		{
			factor = (factor - 0.1)*10;
			
			midtones.w = midtones.x;
			midtones.x = (1 - midtones.w) - (factor * ((1 - midtones.w) / 2));
			midtones.x += midtones.w;
			
			midtones.w = midtones.y;
			midtones.y = (1 - midtones.w) - (factor * ((1 - midtones.w) / 2));
			midtones.y += midtones.w;
			
			midtones.w = midtones.z;
			midtones.z = (1 - midtones.w) - (factor * ((1 - midtones.w) / 2));
			midtones.z += midtones.w;
		}
		
		gl_FragColor = vec4(sample.x * midtones.x, sample.y * midtones.y, sample.z * midtones.z, sample.w);
	}		
	else gl_FragColor = vec4(sample);
} ]

lazyshader 4 "colorgrade_highlights" [ @fsvs } ] [
	uniform vec4 params;
	@fsps
	
	float factor = (sample.x + sample.y + sample.z)/3;
	vec4 highlights = params;
	
	if(factor > 0.5)	//Hightlights
	{
		if(factor <= 0.8)
		{
			factor = (factor - 0.51)*10;
			
			highlights.w = highlights.x;
			highlights.x = (1 - highlights.w) - (factor * ((1 - highlights.w) / 2));
			highlights.x += highlights.w;
			
			highlights.w = highlights.y;
			highlights.y = (1 - highlights.w) - (factor * ((1 - highlights.w) / 2));
			highlights.y += highlights.w;
			
			highlights.w = highlights.z;
			highlights.z = (1 - highlights.w) - (factor * ((1 - highlights.w) / 2));
			highlights.z += highlights.w;
		}
	
		gl_FragColor = vec4(sample.x * highlights.x, sample.y * highlights.y, sample.z * highlights.z, sample.w);
	}
	else gl_FragColor = vec4(sample);
} ]


////////////////////////////////////////////////
//
// cubescript stuff:
//
////////////////////////////////////////////////

cgrade_shadows_r = 1;
cgrade_shadows_g = 1;
cgrade_shadows_b = 1;

cgrade_midtones_r = 0.7;
cgrade_midtones_g = 0.8;
cgrade_midtones_b = 1;

cgrade_highlights_r = 1;
cgrade_highlights_g = 1;
cgrade_highlights_b = 1;

cgrade = [
	addpostfx colorgrade_shadows 0 0 0 $cgrade_shadows_r $cgrade_shadows_g $cgrade_shadows_b 0;
	addpostfx colorgrade_midtones 0 0 0 $cgrade_midtones_r $cgrade_midtones_g $cgrade_midtones_b 0;
	addpostfx colorgrade_highlights 0 0 0 $cgrade_highlights_r $cgrade_highlights_g $cgrade_highlights_b 0;
]

newgui cgrade [
	guititle "Color grading";
	guistayopen [
	guilist [ guilist [
		guitext "By Q009";
		guitext "Feel free to use the shader..";
		guitext "..as long as you give me a credit :P";
		guibar;
		guitext;
		guitext Shadows;
		] ]
		guilist [
		guitext "Red ";
		guifield cgrade_shadows_r 4;

		guitext "Green ";
		guifield cgrade_shadows_g 4;

		guitext "Blue ";
		guifield cgrade_shadows_b 4;
		]
		
		guitext;
		guitext Middletones;
		guilist [
		guitext "Red ";
		guifield cgrade_midtones_r 4;

		guitext "Green ";
		guifield cgrade_midtones_g 4;

		guitext "Blue ";
		guifield cgrade_midtones_b 4;
		]
		
		guitext;
		guitext Highlights;
		guilist [
		guitext "Red ";
		guifield cgrade_highlights_r 4;

		guitext "Green ";
		guifield cgrade_highlights_g 4;

		guitext "Blue ";
		guifield cgrade_highlights_b 4;
		]
		
		guitext;
		
		guilist [
		guibutton "Apply" cgrade;
		guibutton "Reset PostFX" clearpostfx;
		]
		guilist [ guilist [
		guititle !!!NOTE!!!;
		guitext "If you have already applied color grading";
		guitext "please reset PostFX before applying it again!!!";
		] ] 
] ]